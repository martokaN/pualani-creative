---
const base = import.meta.env.SITE || 'http://localhost:4321';
const response = await fetch(`${base}/api/google`);
const { reviews = [], error } = await response.json();

interface Review {
  authorAttribution: {
    displayName: string;
    uri: string;
    photoUri: string;
  };
  rating: number;
  text: {
    text: string;
  };
  publishTime: string;
}
---

<div class="reviews-section py-16 rounded-xl">
  <div class="container mx-auto px-4">
    <h2 class="text-2xl md:text-3xl font-bold text-center text-heading mb-10">Latest Google reviews</h2>

    <div class="relative">
      <div id="reviewsCarousel" class="overflow-hidden">
        <div id="reviewsSlider" class="flex transition-transform duration-500 ease-in-out will-change-transform">
          {reviews.map((review: Review) => (
            <div class="review-card min-w-full md:min-w-[33.333%] p-4 box-border">
              <div class="bg-[#FFFFFF] p-6 rounded-2xl shadow-lg border border-[#4B3001] h-full flex flex-col">
                <div class="flex items-center mb-4">
                  {review.authorAttribution?.photoUri ? (
                    <a href={review.authorAttribution.uri} target="_blank" rel="noopener noreferrer">
                      <img
                        src={review.authorAttribution.photoUri}
                        alt={review.authorAttribution.displayName}
                        class="w-12 h-12 rounded-full mr-4 border border-[#4B3001]"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                      <div class="w-12 h-12 rounded-full bg-[#DFB67D] flex items-center justify-center text-white font-bold mr-4" style="display: none;">
                        {review.authorAttribution?.displayName?.charAt(0) || 'U'}
                      </div>
                    </a>
                  ) : (
                    <div class="w-12 h-12 rounded-full bg-[#DFB67D] flex items-center justify-center text-white font-bold mr-4">
                      {review.authorAttribution?.displayName?.charAt(0) || 'U'}
                    </div>
                  )}

                  <div>
                    <h4 class="font-semibold text-[#432602]">{review.authorAttribution.displayName}</h4>
                    <div class="flex">
                      {Array.from({ length: 5 }).map((_, i: number) => (
                        <svg 
                          xmlns="http://www.w3.org/2000/svg" 
                          class={`h-4 w-4 ${i < review.rating ? 'text-[#DFB67D]' : 'text-gray-300'}`}
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                      ))}
                    </div>
                  </div>
                </div>
                <p class="text-[#432602] flex-grow">{review.text.text}</p>
                <p class="text-sm text-gray-500 mt-4">
                  {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' }).format(new Date(review.publishTime))}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Buttons -->
      <button 
        id="prevButton" 
        class="absolute top-1/2 left-2 -translate-y-1/2 bg-[#DFB67D] hover:bg-[#CA9862] text-white rounded-full p-2 focus:outline-none shadow-md z-10 disabled:opacity-40 disabled:cursor-not-allowed"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button 
        id="nextButton" 
        class="absolute top-1/2 right-2 -translate-y-1/2 bg-[#DFB67D] hover:bg-[#CA9862] text-white rounded-full p-2 focus:outline-none shadow-md z-10 disabled:opacity-40 disabled:cursor-not-allowed"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Indicator Dots -->
      <div id="indicatorDots" class="flex justify-center mt-4">
        <!-- Dots will be dynamically generated by JavaScript -->
      </div>

      <div class="mt-4 text-center">
        <a
          target="_blank"
          href="https://www.google.com/maps/place/Pualani+Creative/...">
          <p class="text-text font-sans text-lg hover:text-hover transition-colors inline w-fit">
            View all reviews on Google
          </p>
        </a>
      </div>

    </div>
  </div>
</div>

<script>
  // Use interface for event types
  interface HTMLImageElementExtended extends HTMLImageElement {
    nextElementSibling: HTMLElement;
  }

  let currentIndex = 0;

  const reviewsSlider = document.getElementById('reviewsSlider') as HTMLElement;
  const prevButton = document.getElementById('prevButton') as HTMLButtonElement;
  const nextButton = document.getElementById('nextButton') as HTMLButtonElement;
  const indicatorDots = document.getElementById('indicatorDots') as HTMLElement;
  const carouselContainer = document.getElementById('reviewsCarousel') as HTMLElement;

  if (!reviewsSlider || !prevButton || !nextButton || !carouselContainer || !indicatorDots) {
    console.warn('One or more required elements not found');
  } else {
    const reviews = Array.from(reviewsSlider.children);
    const totalReviews = reviews.length;

    // Helper function to get slides per view based on screen width
    const getSlidesPerView = (): number => (window.innerWidth >= 768 ? 3 : 1);

    let slidesPerView = getSlidesPerView();
    let maxSlideIndex = Math.max(0, totalReviews - slidesPerView);

    const updateButtons = (): void => {
      prevButton.disabled = currentIndex === 0;
      nextButton.disabled = currentIndex >= maxSlideIndex;
    };

    const renderDots = (): void => {
      indicatorDots.innerHTML = ''; // clear existing dots

      const dotsCount = maxSlideIndex + 1;
      
      // Only create dots if we have reviews
      if (dotsCount > 0) {
        for (let i = 0; i < dotsCount; i++) {
          const dot = document.createElement('button');
          dot.className = 'mx-1 h-3 w-3 rounded-full bg-[#DFB67D] transition-opacity duration-300';
          dot.style.opacity = i === currentIndex ? '1' : '0.5';
          dot.setAttribute('aria-label', `Go to review ${i + 1}`);
          dot.setAttribute('data-index', `${i}`);

          dot.addEventListener('click', (): void => {
            currentIndex = i;
            updateSliderPosition();
          });

          indicatorDots.appendChild(dot);
        }
      }
    };

    const updateSliderPosition = (): void => {
      const reviewWidth = reviews[0]?.clientWidth || 0;
      reviewsSlider.style.transform = `translateX(-${currentIndex * reviewWidth}px)`;
      updateButtons();

      // Update indicator dots
      const dots = indicatorDots.querySelectorAll('button');
      dots.forEach((dot, i) => {
        dot.style.opacity = i === currentIndex ? '1' : '0.5';
      });
    };

    prevButton.addEventListener('click', (): void => {
      if (currentIndex > 0) {
        currentIndex--;
        updateSliderPosition();
      }
    });

    nextButton.addEventListener('click', (): void => {
      if (currentIndex < maxSlideIndex) {
        currentIndex++;
        updateSliderPosition();
      }
    });

    window.addEventListener('resize', (): void => {
      slidesPerView = getSlidesPerView();
      maxSlideIndex = Math.max(0, totalReviews - slidesPerView);

      if (currentIndex > maxSlideIndex) {
        currentIndex = maxSlideIndex;
      }

      renderDots();
      updateSliderPosition();
    });

    // Initialize the carousel
    renderDots();
    updateSliderPosition();
  }
</script>