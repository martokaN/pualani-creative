---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

const categories = ["all", "babymoon", "couple", "elopements", "family", "proposals"];
// Use default import to properly get the image metadata
const images = import.meta.glob<{ default: ImageMetadata }>("../assets/gallery/*/*.jpg", { eager: true });

const galleryImages = Object.entries(images).map(([path, image]) => {
  const parts = path.split("/");
  const category = parts[parts.length - 2];
  return { src: image.default, category };
});
---

<!-- Toggle Button for Mobile -->
<div class="md:hidden flex justify-center mb-4">
  <button id="toggleFilters" class="px-4 py-2 border rounded-md text-text border-border flex items-center gap-2">
    <span>Toggle Filters</span>
    <svg id="toggleIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform duration-300 ease-in-out" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>
</div>

<!-- Filter Buttons -->
<div id="filtersContainer" class="md:block transition-all duration-500 ease-in-out transform origin-top overflow-hidden max-h-0 opacity-0 md:opacity-100 md:max-h-full md:mb-8">
  <div class="flex flex-wrap justify-center md:justify-start mb-0 pb-0 border-b-0 border-border transition-all duration-500 ease-in-out">
    {categories.map((item) => (
      <button 
        class="filter-btn m-2 md:m-3 py-2 px-4 md:px-6 flex items-center justify-center rounded-md border border-border hover:bg-background transition-colors text-text font-sans capitalize"
        data-filter={item}
      >
        {item}
      </button>
    ))}
  </div>
</div>

<!-- Gallery -->
<div id="gallery" class="columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-4 space-y-4">
  {galleryImages.length === 0 ? (
    <p>No images found!</p>
  ) : (
    galleryImages.map(({ src, category }, index) => (
      <div 
        class="gallery-item break-inside-avoid overflow-hidden rounded-2xl shadow cursor-pointer" 
        data-category={category}
        data-index={index}
      >
        <Image
          src={src}
          alt={category}
          class="w-full h-auto rounded-2xl hover:scale-105 duration-300 transition-transform"
          loading="lazy"
          widths={[960, 1280, 1920]}
          sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
          format="webp"
        />
      </div>
    ))
  )}
</div>

<!-- Lightbox - Removed conflicting classes -->
<div 
  id="lightbox" 
  class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden"
>
  <div class="w-full h-full flex items-center justify-center">
    <button id="prevBtn" class="absolute left-4 text-white text-4xl">&#8592;</button>
    <img id="lightboxImg" class="max-h-[90vh] max-w-[90vw] rounded-md" src="" alt="lightbox" />
    <button id="nextBtn" class="absolute right-4 text-white text-4xl">&#8594;</button>
    <button id="closeBtn" class="absolute top-4 right-4 text-white text-2xl">&#10005;</button>
  </div>
</div>

<!-- Script -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const galleryItems = document.querySelectorAll('.gallery-item');
    const lightbox = document.getElementById('lightbox') as HTMLElement | null;
    const lightboxImg = document.getElementById('lightboxImg') as HTMLImageElement | null;
    const prevBtn = document.getElementById('prevBtn') as HTMLElement | null;
    const nextBtn = document.getElementById('nextBtn') as HTMLElement | null;
    const closeBtn = document.getElementById('closeBtn') as HTMLElement | null;
    const toggleFilters = document.getElementById('toggleFilters') as HTMLElement | null;
    const filtersContainer = document.getElementById('filtersContainer') as HTMLElement | null;
    const toggleIcon = document.getElementById('toggleIcon') as HTMLElement | null;
    const filterContentWrapper = filtersContainer?.querySelector('div') as HTMLElement | null;

    let currentIndex = 0;
    let visibleImages: string[] = [];
    let isAnimating = false;

    function applyFilter(filter: string) {
      visibleImages = [];

      galleryItems.forEach(item => {
        const category = item.getAttribute('data-category');
        const show = filter === 'all' || category === filter;
        (item as HTMLElement).style.display = show ? 'block' : 'none';

        if (show) {
          const img = item.querySelector('img');
          if (img?.getAttribute('src')) {
            visibleImages.push(img.getAttribute('src')!);
          }
        }
      });

      filterButtons.forEach(b => {
        b.classList.remove('bg-background', 'ring-1', 'ring-border');
      });

      const activeBtn = document.querySelector(`[data-filter="${filter}"]`);
      if (activeBtn) {
        activeBtn.classList.add('bg-background', 'ring-1', 'ring-border');
      }
    }

    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const filter = btn.getAttribute('data-filter');
        if (filter) applyFilter(filter);
      });
    });

    toggleFilters?.addEventListener('click', () => {
      if (isAnimating || !filtersContainer || !filterContentWrapper || !toggleIcon) return;

      isAnimating = true;
      const isOpen = filtersContainer.classList.contains('open');

      if (isOpen) {
        filtersContainer.classList.remove('max-h-96', 'opacity-100', 'open');
        filtersContainer.classList.add('max-h-0', 'opacity-0');
        filterContentWrapper.classList.remove('mb-6', 'pb-4', 'border-b');
        toggleIcon.style.transform = 'rotate(0deg)';
      } else {
        filtersContainer.classList.remove('max-h-0', 'opacity-0');
        filtersContainer.classList.add('max-h-96', 'opacity-100', 'open');
        filterContentWrapper.classList.add('mb-6', 'pb-4', 'border-b');
        toggleIcon.style.transform = 'rotate(180deg)';
      }

      setTimeout(() => {
        isAnimating = false;
      }, 500);
    });

    filtersContainer?.addEventListener('transitionend', () => {
      isAnimating = false;
    });

    const defaultBtn = document.querySelector('[data-filter="all"]') as HTMLElement | null;
    defaultBtn?.click();

    function showLightbox(index: number) {
      if (!lightbox || !lightboxImg) return;
      currentIndex = index;
      lightboxImg.src = visibleImages[index];
      lightbox.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      if (!lightbox) return;
      lightbox.classList.add('hidden');
      document.body.style.overflow = '';
    }

    function showNext() {
      if (!lightboxImg) return;
      currentIndex = (currentIndex + 1) % visibleImages.length;
      lightboxImg.src = visibleImages[currentIndex];
    }

    function showPrev() {
      if (!lightboxImg) return;
      currentIndex = (currentIndex - 1 + visibleImages.length) % visibleImages.length;
      lightboxImg.src = visibleImages[currentIndex];
    }

    galleryItems.forEach(item => {
      item.addEventListener('click', () => {
        const img = item.querySelector('img')?.getAttribute('src');
        const indexInVisible = visibleImages.indexOf(img ?? '');
        if (indexInVisible !== -1) showLightbox(indexInVisible);
      });
    });

    nextBtn?.addEventListener('click', showNext);
    prevBtn?.addEventListener('click', showPrev);
    closeBtn?.addEventListener('click', closeLightbox);

    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (!lightbox || lightbox.classList.contains('hidden')) return;
      if (e.key === 'ArrowRight') showNext();
      if (e.key === 'ArrowLeft') showPrev();
      if (e.key === 'Escape') closeLightbox();
    });

    lightbox?.addEventListener('click', (e: MouseEvent) => {
      if (e.target === lightbox) closeLightbox();
    });
  });
</script>